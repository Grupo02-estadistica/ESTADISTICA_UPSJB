---
title: "autismo"
author: __
format: html
editor: visual
---

INTEGRANTES:

CARDENAS SANCHEZ, Alai Alexis

CHOLÁN SÁNCHEZ, Ariana Maricielo

PINTO COAQUIRA, Ines

# Paquetes para resumir datos

Instalar paquetes

```{r}
install.packages("gtsummary")
install.packages("finalfit")
install.packages("flextable")
```

Cargar paquetes

```{r}
library(tidyverse)
library(here)
library(rio)
library(gtsummary) ## Para la "Tabla 1"
library(finalfit)
library(flextable)
```

# Cargando los datos

```{r}
autismo_limpio <- import(here("data", "data_autismo_12"))

```

Antes de iniciar el análisis descriptivo de tus datos, estos deben ser inspeccionados para la eliminación de errores en la codificación o transformación de valores perdidos o anómalos.

### La "estructura" de los datos

```{r}
str(autismo_limpio)
```

# 1. Resumen de variables categóricas

Para resumir variables categóricas usamos frecuencias simples y frecuencias porcentuales. Es importante resumir, también, los datos perdidos. Resumen con la función `table()`

```{r}
table(autismo_limpio$genero, useNA = "ifany")
```

```{r}
table(autismo_limpio$grupo_edad, useNA = "ifany")
```

Con tidyverse

```{r}
autismo_limpio |> 
  dplyr::count(grupo_edad, sort = TRUE)
```

Valores perdidos en proporciones

```{r}
prop.table(table(autismo_limpio$grupo_edad, useNA = "ifany"))
```

```{r}
round(prop.table(table(autismo_limpio$grupo_edad, useNA = "ifany"))*100)
```

Otra variable: probabilidad de presentar autismo

```{r}
autismo_limpio |> 
  dplyr::count(Puntuacion_total_prueba, sort = TRUE)
```

```{r}
prop.table(table(autismo_limpio$Puntuacion_total_prueba, useNA = "ifany"))
```

```{r}
round(prop.table(table(autismo_limpio$Puntuacion_total_prueba, useNA = "ifany"))*100)
```

# 2. Resumen de variables continuas

Para resumir variables numéricas hay funciones en la base de R que permiten calcular los principales estadísticos. Por ejemplo, la función `mean()` y `sd()`, calcula el promedio y desviación estandard de un conjunto de datos.

```{r}
autismo_limpio_1 <- autismo_limpio %>%
  mutate(puntuacion_total = rowSums(select(., puntuacion_p1:puntuacion_p10), na.rm = TRUE))
```

```{r}
mean(autismo_limpio_1$puntuacion_total, na.rm = TRUE)
```

```{r}
sd(autismo_limpio_1$puntuacion_total, na.rm = TRUE)
```

Ojo, en este ejemplo sólo será posible calcular el promedio y desviación estandard si el valor para el argumento na.rm es TRUE. Esto elimina los valores perdidos en el cálculo.

Otras funciones que puedes encontrar útil son `min()`, `max()`, `median()` y `IQR()`

```{r}
min(autismo_limpio_1$puntuacion_total, na.rm = TRUE) # Proporciona el valor mínimo

IQR(autismo_limpio_1$puntuacion_total, na.rm = TRUE) # Calcula el rango intercuartilico

median(autismo_limpio_1$puntuacion_total, na.rm = TRUE) # Calcula la mediana
```

### La función `summary()` para calcular todas las medidas, a la vez.

`summary()` es una función nativa de R que permite calcular todas las medidas estadísticas a la vez. Abajo, un ejemplo con la variable puntuacion total

```{r}
summary(autismo_limpio_1$puntuacion_total)
```

## ¿Mediana o media?

Una de las cosas que queremos saber al realizar un análisis descriptivo es la distribución de los datos. La media y mediana puede informarnos al respecto. Abajo, un ejemplo para la variable puntuacion total

```{r}
mean(autismo_limpio_1$puntuacion_total, na.rm = T)
```

```{r}
median(autismo_limpio_1$puntuacion_total, na.rm = T)
```

La media y mediana de la variable resultado son similares. Estos sugiere que los datos tienen una distribución simétrica.

Debajo otro ejemplo con la variable puntuacion_p1

```{r}
mean(autismo_limpio_1$puntuacion_p1, na.rm = T)
```

```{r}
median(autismo_limpio_1$puntuacion_p1, na.rm = T)
```

La media y mediana de la variable puntuacion_p1 son diferentes. Estos sugiere que los datos tienen una distribución asimétrica.

Comprobémoslo visualmente

```{r}
par(mfrow=c(1,2)) # Configuramos e número de elementos por Figura
hist(autismo_limpio_1$puntuacion_p1)
hist(autismo_limpio_1$puntuacion_total)
```

# \[resumen\] Por otra variable

Frecuentemente es importante realizar el resumen de datos por otra variable. En R, podemos calcular esto usando la función `group_by()` y `summarize()`

```{r}
autismo_limpio_1 |> 
  group_by(grupo_edad) |> 
  summarise(n_observ = n(),
            porcentaje = (n_observ / nrow(autismo_limpio_1)*100))
```

```{r}
autismo_limpio_1 |>  
  group_by(ictericia_al_nacer) |> 
  summarize(promedio = mean(puntuacion_total, na.rm = T))
```

```{r}
autismo_limpio_1 |>  
  group_by(Puntuacion_total_prueba, grupo_edad) |> 
  summarize(promedio = mean(puntuacion_total, na.rm = T))
```

Otros estadísticos

```{r}
autismo_limpio_1 |>  
  group_by(Puntuacion_total_prueba, grupo_edad) |> 
  summarize(promedio_puntuacion_total = mean(puntuacion_total, na.rm = TRUE),
            DE = sd(puntuacion_total, na.rm = TRUE),
            max_valor_resultado = max(puntuacion_total, na.rm = TRUE))
```

Percentiles del nivel de puntuacion total en participantes con autismos usando la función `filter()`

```{r}
autismo_limpio_1 |> 
  dplyr::filter(puntuacion_total == "Si") |>  # Filtra los registros donde el resultado es "Si"
  group_by(grupo_edad) |>  # Agrupa por grupo de edad
  summarize(
    p25_puntuacion_p1 = quantile(puntuacion_p1, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p1 = quantile(puntuacion_p1, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p1 = quantile(puntuacion_p1, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p2 = quantile(puntuacion_p2, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p2 = quantile(puntuacion_p2, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p2 = quantile(puntuacion_p2, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p3 = quantile(puntuacion_p3, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p3 = quantile(puntuacion_p3, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p3 = quantile(puntuacion_p3, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p4 = quantile(puntuacion_p4, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p4 = quantile(puntuacion_p4, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p4 = quantile(puntuacion_p4, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p5 = quantile(puntuacion_p5, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p5 = quantile(puntuacion_p5, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p5 = quantile(puntuacion_p5, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p6 = quantile(puntuacion_p6, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p6 = quantile(puntuacion_p6, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p6 = quantile(puntuacion_p6, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p7 = quantile(puntuacion_p7, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p7 = quantile(puntuacion_p7, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p7 = quantile(puntuacion_p7, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p8 = quantile(puntuacion_p8, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p8 = quantile(puntuacion_p8, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p8 = quantile(puntuacion_p8, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p9 = quantile(puntuacion_p9, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p9 = quantile(puntuacion_p9, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p9 = quantile(puntuacion_p9, probs = 0.75, na.rm = TRUE),
    
    p25_puntuacion_p10 = quantile(puntuacion_p10, probs = 0.25, na.rm = TRUE),
    p50_puntuacion_p10 = quantile(puntuacion_p10, probs = 0.50, na.rm = TRUE),
    p75_puntuacion_p10 = quantile(puntuacion_p10, probs = 0.75, na.rm = TRUE)
  )

```

Usando `across()` para multiples estadísticos descriptivos para multiples variables

```{r}
autismo_limpio_1 |> 
  group_by(uso_previo_aplicacion) |> 
  summarize(across(.cols = c(puntuacion_total, puntuacion_p1, puntuacion_p2, puntuacion_p3, puntuacion_p4,puntuacion_p5,puntuacion_p6,puntuacion_p7,puntuacion_p8,puntuacion_p9,puntuacion_p10),
                   .fns = list("promedio" = mean, "DE" = sd, 
                               "máximo" = max),
                   na.rm = TRUE))
```

```{r}
autismo_limpio_1 |> 
  group_by(puntuacion_total) |> 
  summarize(across(.cols = where(is.numeric),
                   .fns = list("promedio" = mean, "DE" = sd, 
                               "máximo" = max),
                   na.rm = TRUE))
```

# La "Tabla 1" con gtsummary

```{r}
install.packages("finalfit")
install.packages("gtsummary")
```

```{r}
library(gtsummary)
```

Tabla 1 básico

```{r}
autismo_limpio_1 |> 
  select(edad, grupo_edad,puntuacion_total, etnicidad, pais_de_residencia, uso_previo_aplicacion) |> 
  tbl_summary()
```

```{r}
autismo_limpio_1 |> 
  select(edad, grupo_edad,puntuacion_total, etnicidad, pais_de_residencia, uso_previo_aplicacion) |> 
  tbl_summary(
    by = puntuacion_total
  )
```

Pero las tablas deben ser autoexplicativas...

## Configurando el estilo e idioma

```{r}
theme_gtsummary_language(language = "es") # idioma es = español
theme_gtsummary_journal(journal = "jama")
```

```{r}
autismo_limpio_1 |> 
  select(puntuacion_total,grupo_edad,pais_de_residencia,Puntuacion_total_prueba, diagnosticado_con_asd) |> 
  tbl_summary(
    by = diagnosticado_con_asd
  )
```

## Recodificación de variables y adición de nombres correctos a variables

```{r}
autismo_limpio_2 = autismo_limpio_1 |>
  mutate(
    # Etiquetar la columna 'edad'
    Edad = ff_label(edad, "Edad (años)"),  
    
    # Crear grupo de edad como factor y etiquetarlo
    grupo_edad = grupo_edad |> as.factor() |> ff_label("Grupo de Edad"),

    # Crear grupo de edad como factor y etiquetarlo
    quien_completo_la_prueba = quien_completo_la_prueba |> as.factor() |> ff_label("Persona responsable"),
    # Crear grupo de edad como factor y etiquetarlo
    Puntuacion_total_prueba = Puntuacion_total_prueba |> as.factor() |> ff_label("Puntaje Total")
  )
```

```{r}
library(finalfit)
```

Añadiendo nombre a la variable dependiente

```{r}
tabla_1.v2 = autismo_limpio_2 |>
  select(edad, grupo_edad,genero,etnicidad,ictericia_al_nacer,pais_de_residencia,uso_previo_aplicacion,puntuacion_total,) |>  # Seleccionamos las columnas correctas
  tbl_summary(by = puntuacion_total) |>  # Agrupamos por la columna 'resultado'
  modify_spanning_header(all_stat_cols() ~ "**AUTISMO**") |>  # Modificamos el encabezado
  add_overall()  # Añadimos el resumen general

```

```{r}
tabla_1 = autismo_limpio_2 |> 
  select(grupo_edad,diagnosticado_con_asd,genero,Puntuacion_total_prueba,ictericia_al_nacer,uso_previo_aplicacion,quien_completo_la_prueba) |> 
  tbl_summary(by = diagnosticado_con_asd) |> 
  modify_spanning_header(all_stat_cols() ~ "**Resultados autismo**") |>
  add_overall() |> 
  modify_caption("**Tabla 1**. Variables consideradas en el estudio ")
```

```{r}
install.packages("flextable")
library(flextable)
```

```{r}
tabla_1_flex = as_flex_table(tabla_1) # Convertir a flex table
save_as_docx(tabla_1_flex, path = "tabla_1_autismo.docx") # Guardar tabla

```
